package main

import (
	"fmt"
	"strconv"
	"time"
)

templ home(g Game, players []Player, poll bool) {
	@game(g, poll)
	@playerStatistics(players, poll)
}

templ game(g Game, poll bool) {
	<div
		if poll {
			id="game"
			hx-get="/game"
			hx-trigger="every 5s"
			hx-swap="outerHTML"
		} else {
			id="game"
		}
	>
		<h2>Game</h2>
		<table class="table-auto">
			<thead>
				<tr>
					<th>Started</th>
					<th>Total</th>
					<th>Current</th>
					<th>Period</th>
					<th>End</th>
					<th>Reset</th>
				</tr>
			</thead>
			<tbody>
				<td>
					// Started
					switch  g.State() {
						case GameStateNotStarted:
							<button class="btn btn-green" hx-post="/game/start" hx-target="#content" hx-swap="innerHTML">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="16"
									height="16"
									fill="currentColor"
									class="bi bi-play-fill"
									viewBox="0 0 16 16"
								>
									<path
										d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393"
									></path>
								</svg>
							</button>
						default:
							// GameStateInProgress || GameStateFinished
							{ g.StartTime.Format(time.Kitchen) }
					}
				</td>
				<td>
					// Total
					switch  g.State() {
						case GameStateNotStarted:
							0s
						case GameStateInProgress, GameStatePaused:
							{ time.Since(g.StartTime).Round(time.Second).String() }
						default:
							// GameStateFinished
							{ g.EndTime.Sub(g.StartTime).Round(time.Second).String() }
					}
				</td>
				<td>
					// Current
					switch  g.State() {
						case GameStateNotStarted:
							0s
						case GameStateInProgress:
							{ time.Since(g.CurrentPeriod().StartTime).Round(time.Second).String() }
						default:
							0s
							// GameStatePaused, GameStateFinished
					}
				</td>
				<td>
					// Period
					switch g.State() {
						case GameStateInProgress:
							<button class="btn btn-orange" hx-post="/game/pause" hx-target="#content" hx-swap="innerHTML">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="16"
									height="16"
									fill="currentColor"
									class="bi bi-pause-fill"
									viewBox="0 0 16 16"
								>
									<path
										d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5m5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5"
									></path>
								</svg>
							</button>
						case GameStatePaused:
							<button class="btn btn-green" hx-post="/game/resume" hx-target="closest div" hx-swap="outerHTML">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="16"
									height="16"
									fill="currentColor"
									class="bi bi-play-fill"
									viewBox="0 0 16 16"
								>
									<path
										d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393"
									></path>
								</svg>
							</button>
						default:
							-
					}
				</td>
				<td>
					// End
					switch  g.State() {
						case GameStateNotStarted:
							-
						case GameStateInProgress, GameStatePaused:
							<button class="btn btn-red" hx-post="/game/end" hx-target="#content" hx-swap="innerHTML">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="16"
									height="16"
									fill="currentColor"
									class="bi bi-stop-fill"
									viewBox="0 0 16 16"
								>
									<path
										d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5"
									></path>
								</svg>
							</button>
						default:
							// GameStateFinished
							{ g.EndTime.Format(time.Kitchen) }
					}
				</td>
				<td>
					// Reset
					switch  g.State() {
						case GameStateFinished:
							// GameStateFinished
							<button class="btn btn-blue" hx-post="/game/reset" hx-target="#content" hx-swap="innerHTML">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									width="16"
									height="16"
									fill="currentColor"
									class="bi bi-arrow-clockwise"
									viewBox="0 0 16 16"
								>
									<path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z"></path>
									<path
										d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466"
									></path>
								</svg>
							</button>
						default:
							-
					}
				</td>
			</tbody>
		</table>
	</div>
}

templ subButton(name string, playing bool) {
	{{
	toggle := "on"
	buttonClass := "btn btn-green"
	if playing {
		toggle = "off"
		buttonClass = "btn btn-orange"
	}
	}}
	<button
		class={ buttonClass }
		hx-post={ string(templ.URL(fmt.Sprintf("/players/%s/sub-%s", name, toggle))) }
		hx-swap="outerHTML"
	>
		if playing {
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="16"
				height="16"
				fill="currentColor"
				class="bi bi-pause-fill"
				viewBox="0 0 16 16"
			>
				<path
					d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5m5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5"
				></path>
			</svg>
		} else {
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="16"
				height="16"
				fill="currentColor"
				class="bi bi-play-fill"
				viewBox="0 0 16 16"
			>
				<path
					d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393"
				></path>
			</svg>
		}
	</button>
}

templ playerActions(p Player) {
	<tr>
		<td>{ strconv.Itoa(p.Number) }</td>
		<td>{ p.Name }</td>
		<td>{ strconv.Itoa(p.PlayCount) }</td>
		<td>{ p.PlayDuration.Round(time.Second).String() }</td>
		<td>
			if p.Playing && !p.PlayStarted.IsZero() {
				{ time.Since(p.PlayStarted).Round(time.Second).String() }
			} else {
				0s
			}
		</td>
		<td>
			@subButton(p.Name, p.Playing)
		</td>
	</tr>
}

templ playerStatistics(players []Player, poll bool) {
	<div
		if poll {
			id="players"
			hx-get="/players"
			hx-trigger="every 5s"
		} else {
			id="players"
		}
	>
		<h2>Players</h2>
		<table class="table-auto">
			<thead>
				<tr>
					<th>#</th>
					<th>Name</th>
					<th>Count</th>
					<th>Total</th>
					<th>Current</th>
					<th>Sub</th>
				</tr>
			</thead>
			<tbody>
				for _, p := range players {
					@playerActions(p)
				}
			</tbody>
		</table>
	</div>
}
